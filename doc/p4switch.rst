=======================
P4 Switch Topology Node
=======================

Using P4 Switch Nodes
---------------------

The P4 switch makes available several shells for configuring the switch:

- A protocol-dependent low level API, auto-generated from the P4 program.
  This API is available as three sub-shells:

  - pd_conn_mgr
  - pd_mc
  - pd_p4

  You should be able to run commands as, for example:

  ::

     sw1('command arg1 arg2', shell='pd_p4')

  The help should be viewable when calling with no arguments. However, the
  auto-generated shells may have an issue with argument parsing. In case of
  issues print the help by calling the script directly:

  ::

     sw1('/p4factory/targets/switch/tests/pd_thrift/conn_mgr-remote', shell='bash')

  There is no documentation for this API.

- A higher level switch API, available as the ``api`` shell. This API is
  `documented online <http://p4lang.github.io/switchapi/>`_.

- ``sai`` shell, a standard SAI API, which implements some SAI functions.
  Support was incomplete and documentation sparse at the time of writing.
  The supported SAI attributes are documented at the
  `switchsai repo <https://github.com/p4lang/switchsai/tree/master/doc>`_.


The P4 switch
-------------

The following explains several important things to consider when working with
the P4 switch and building its Docker image. It is unnecessary when writing
tests using the default P4 switch capabilities.

A P4 docker switch is an instance of the P4 behavioral simulator, running in a
Docker container. The switch simulator is built using the `p4factory github
repository <https://github.com/p4lang/p4factory>`_, which in turn makes use of
several `p4lang repositories <https://github.com/p4lang>`_.

To install and configure p4factory and its dependencies follow its README
instructions:

::

   git submodule update --init --recursive
   ./install_deps.sh
   sudo p4factory/tools/veth_setup.sh
   cd p4factory
   ./autogen.sh
   ./configure

And compile and run a test to verify that everything is working:

::

   cd p4factory/targets/basic_routing/
   make bm
   sudo ./behavioral-model
   cd p4factory/targets/basic_routing/
   sudo python run_tests.py --test-dir tests/ptf-tests/

The p4factory repository includes several targets, which are p4 programs which
may be compiled and run using the behavioral simulator. The most relevant of
those targets is switch.p4, which simulates a complete switch in P4.

There are two ways to simulate a P4 program, including the P4 switch:

- `Behavioral simulator V1 <https://github.com/p4lang/p4c-behavioral>`_
  transforms a P4 program directly into C code. The P4 headers, tables,
  actions, control flows and more are all transformed directly into C code.
  This compiler uses p4-hlir to obtain a parsed representation of the P4
  elements. Functions are then defined for each element, making use of the
  `Tenjin templating engine <http://www.kuwata-lab.com/tenjin/>`_. The switch's
  PD (protocol dependent) API is generated by using Tenjin to generate a
  `Thrift <https://thrift.apache.org/>`_ service definition and the server-side
  code.

- `Behavioral simulator V2 <https://github.com/p4lang/behavioral-model>`_ is a
  C++ simulator with no auto-generated code. The simulator is rather fed a JSON
  file generated by p4c-bm (https://github.com/p4lang/p4c-bm).


Building the P4 docker switch
-----------------------------

The P4 switch docker node is built by Behavioral simulator V1. Building the P4
docker switch may require editing several files from the p4factory repository.
Ideally, to build the switch image, cd to p4factory/targets/switch and run:

::

   make docker-image

This should build the switch-link image, which includes all switch capabilities,
except for the OpenFlow agent. However, you may need to edit the Dockerfile to
set a proxy, or fix any broken dependency links (the process is not fail-safe).

The build process is as follows:

- The container installs p4factory dependencies (from apt-get).

- The complete p4factory repository is copied into the Docker container.

- The switch target is compiled using behavioral model (V1), in the container.
  The executable file is at ``/p4factory/targets/switch/behavioral-model``.

- There are several important considerations when running the switch:

  - The switch uses the interfaces veth250 and veth251. One of them is the CPU
    port (undocummented). Create them and bring them up with:

    ::

       ip link add name veth250 type veth peer name veth251
       ip link set dev veth250 up
       ip link set dev veth251 up

  - The switch automatically looks for veth interfaces as front ports. To
    disable this feature and manually set the interfaces to use as front ports
    use the --no-veth option and pass a list of interfaces using the -i option:

    ::

       ./behavioral-model --no-veth -i eth1 -i eth2 -i eth3

  - The switch automatically creates pcap files for every port as log files.
    To disable them use the `--no-pcap` option.

  - Use the `--of-ip` option to set the OpenFlow controller's IP. This applies
    only if the switch was compiled with docker support.

- After successful compilation, the switch's APIs are located at
  ``/p4factory/targets/switch/build/thrift/``. You may have to fix Python
  imports by moving the executables one level up. These APIs are all
  autogenerated by Thrift. To run them specify the port where the switch's
  server is listening, for example:

  ::

     switch_sai_rpc-remote -h localhost:9092 sai_thrift_create_vlan 1
